import sys
import random
from test import Test
import controller

class P(process, controller.Controllee):
    def setup(ctl, s:set, test:Test, nrequests:int):  # s is set of all other processes
        super().setup(ctl)
        self.q = set()

    def request_resource():
        -- request
        c = logical_clock()
        send(('request', c, self), to= s)
        q.add(('request', c, self))
        return c

    def critical_section(c, task):
        await(each(('request', c2, p) in q,
                   has= (c2, p)==(c, self) or (c, self) < (c2, p)) and
              each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))
        -- critical_section
        send(('log', c, 'CS', self), to= test)
        task()

    def release_resource(c):
        -- release
        q.remove(('request', c, self))
        lc = logical_clock()
        send(('log', lc, 'Release', self), to= test)
        send(('release', lc, self), to= s)

    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self), to= p)

    def receive(msg= ('release', _, p)):
        min_request_clock = float('inf')
        min_request = None
        for x in setof(('request', c, p), ('request', c, _p) in q):
            if x[1] < min_request_clock:
                min_request_clock = x[1]
                min_request = x
        q.remove(min_request)

    @controller.run
    def run():
        def task():
            output('in cs')
        logical_clocks = [-1] * nrequests
        RCF = [0, 0, 0]
        while True:
            if RCF == [nrequests] * 3:
                break
            index = random.randint(0, 2)
            if RCF[index] == nrequests:
                continue
            if index == 0:
                logical_clocks[RCF[index]] = request_resource()
                RCF[index] += 1
            elif RCF[index] < RCF[index - 1]:
                if index == 1 and RCF[index] == RCF[index + 1]:
                    critical_section(logical_clocks[RCF[index]], task)
                elif index == 2:
                    release_resource(logical_clocks[RCF[index]])
                else:
                    continue
                RCF[index] += 1

        send(('done', self), to= parent())
        await(received(('done',), from_=parent()))
        output('terminating')

def main():
    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 10
    nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1

    config(channel= 'fifo', clock= 'Lamport')

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nprocs,))
    start(ctl)

    ps = new(P, num=nprocs)
    test = new(Test)
    setup(test, (ps, nrequests))
    start(test)

    for p in ps: setup(p, (ctl, ps-{p}, test, nrequests))
    start(ps)

    await(each(p in ps, has=received(('done', p))))
    send(('done',), to=ps)
    send(('done',), to=test)

# This is an executable specification of the algorithm described in
# Lamport, L. (1978). "Time, clocks, and the ordering of events in a
# distributed system".  Communications of the ACM, 21(7):558-565.

# This code includes setup and termination for serving a given number of
# requests per process.

# All labels are not needed,
# leaving 14 or 15 lines total for the algorithm body and message handlers.
