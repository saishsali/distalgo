import sys
from random import randint
from test import Test
import controller
import time

# Message loss rate and message delay
def message_loss_delay(message_loss, message_delay):
    if randint(0, 100) <= message_loss:
        return False

    if message_delay > 0:
        time.sleep(randint(0, message_delay))
    return True

class Proposer(process, controller.Controllee):
    def setup(ctl, acceptors:set, message_loss:int, message_delay:int,
              proposer_timeout:int, wait_time:int):
        super().setup(ctl)
        self.n = None              # proposal number
        self.majority = acceptors  # majority of acceptors; all in other papers

    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num
        if message_loss_delay(message_loss, message_delay):
            send(('prepare', n), to= majority)

        if await(len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2 or
                 len(setof(a, received(('reject', _n, q), from_ =a))) > 0):
            rejects = setof(p_num, received(('reject', _n, p_num), from_ =a))
            if len(rejects) > 0:
                output('Proposal rejected', n)
                n = (max(max(rejects), n[0]), self)
                return
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))
            if message_loss_delay(message_loss, message_delay):
                send(('accept', n, v), to= responded)
            debug('### chose', n, v)

        elif timeout(proposer_timeout):
            output('failed proposal number', n)

    @controller.run
    def run():
        while not received(('done',)):
            to_consent()
            time.sleep(wait_time)
        output('terminating')

    def anyof(s):
        return next(iter(s)) if s else None

class Acceptor(process, controller.Controllee):
    def setup(ctl, learners:set, message_loss:int, message_delay:int):
        super().setup(ctl)

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            if message_loss_delay(message_loss, message_delay):
                send(('respond', n, maxprop), to =p)
        else:
            max_n = anyof(setof(n[0], sent(('respond', n, _)),
                               n==max(setof(n, sent(('respond', n, _))))))
            output('Rejecting', n)
            if message_loss_delay(message_loss, message_delay):
                send(('reject', n, max_n), to =p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            if message_loss_delay(message_loss, message_delay):
                send(('accepted', n, v), to= learners)

    @controller.run
    def run():
        await(received(('done',)))
        output('terminating')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

class Learner(process, controller.Controllee):
    def setup(ctl, acceptors:set, test:Test, learner_timeout:int):
        super().setup(ctl)

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)
            send(('log', v, self), to= test)

        elif timeout(learner_timeout):
            output('failed learning anything')

    @controller.run
    def run():
        learn()
        output('terminating')
        send(('learned', ), to=nodeof(self))

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    message_loss = int(float(sys.argv[4]) * 100) if len(sys.argv) > 4 else 0
    message_delay = int(sys.argv[5]) if len(sys.argv) > 5 else 0
    wait_time = int(sys.argv[6]) if len(sys.argv) > 6 else 0
    proposer_timeout = int(sys.argv[7]) if len(sys.argv) > 7 else 1
    learner_timeout = int(sys.argv[8]) if len(sys.argv) > 8 else 10

    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nacceptors + nproposers + nlearners,))
    start(ctl)

    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (ctl, acceptors, message_loss, message_delay,
                               proposer_timeout, wait_time), num= nproposers)
    test = new(Test, num= 1)
    setup(test, (nlearners, learner_timeout))
    learners = new(Learner, (ctl, acceptors, test, learner_timeout),
                   num= nlearners)
    for p in acceptors: setup(p, (ctl, learners, message_loss, message_delay))
    start(acceptors | proposers | learners | test)

    await(each(l in learners, has=received(('learned',), from_=l)))
    output('done')
    send(('done',), to= (acceptors|proposers|test))

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.
