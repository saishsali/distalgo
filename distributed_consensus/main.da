import subprocess
import sys
import random
import json
import statistics
from prettytable import PrettyTable
import matplotlib.pyplot as plt

algorithms = ['orig.da', 'preemption.da']
performance_stats = ['user_time', 'system_time', 'process_time', 'wallclock_time']
variable_stats = {
    'msg_loss'  : 'Message loss rate',
    'msg_delay' : 'Message delay',
    'wait_time' : 'Wait time'
}

def get_performance_parameters():
    f = open("performance_logs", "r")
    data = json.loads(f.readline())
    params = data['All']
    params['Total_wallclock_time'] = data['Wallclock_time']
    f.close()
    return params

def get_correctness_parameters():
    f = open("correctness_logs", "r")
    correctness = int(f.readline())
    f.close()
    return correctness

def get_performance_statistics(performance_params):
    performance = {}
    for param in performance_params:
        for key, value in param.items():
            performance.setdefault(key, []).append(float(round(param[key], 3)))

    perf_average, perf_std_deviation, perf_range = {}, {}, {}
    for key, stats in performance.items():
        perf_std_deviation[key] = float(round(statistics.stdev(stats), 3))
        perf_average[key] = float(round(sum(stats) / len(stats), 3))
        perf_range[key] = float(round(max(stats)  - min(stats), 3))

    return perf_average, perf_std_deviation, perf_range

def add_plot_data(plot_dict, avg_perf, std_dev):
    for stat in performance_stats:
        plot_dict.setdefault('avg_' + stat, []).append(
                             avg_perf['Total_' + stat])
        plot_dict.setdefault('std_' + stat, []).append(
                             std_dev['Total_' + stat])

def add_row_to_table(table, algo, variable_stat, stats):
    table.add_row([algo, variable_stat, stats['Total_user_time'],
                   stats['Total_system_time'], stats['Total_process_time'],
                   stats['Total_wallclock_time'], stats['Total_memory']])

def plot_graph(data, x_param):
    for stat in performance_stats:
        plt.xlabel(x_param)
        plt.ylabel(stat)
        for algo in algorithms:
            plt.plot(data[algo][x_param], data[algo]['avg_' + stat], label = algo + ' Average')
            plt.plot(data[algo][x_param], data[algo]['std_' + stat], label = algo + ' Standard Deviation')
        plt.legend()
        plt.savefig(x_param + '_' + stat)
        plt.clf()

def print_arguments(pp, aa, ll, nn, rr, dd, ww, tp, tl):
    print('**************************************')
    print('              ARGUMENTS               ')
    print('**************************************')
    print('Number of proposers: {}'.format(pp))
    print('Number of acceptors: {}'.format(aa))
    print('Number of learners: {}'.format(ll))
    print('Number of repititions of each run: {}'.format(nn))
    print('Message loss rate: {}'.format(rr))
    print('Message delay: {}'.format(dd))
    print('Wait time: {}'.format(ww))
    print('Proposer timeout: {}'.format(tp))
    print('Learner timeout: {}'.format(tl))
    print('**************************************')

def print_current_execution(stat, value, algo, ii):
    print('**************************************')
    print('          CURRENT EXECUTION           ')
    print('**************************************')
    print('Variable stat: {}'.format(stat))
    print('Variable stat value: {}'.format(value))
    print('Algorithm: {}'.format(algo))
    print('Repition number: {}'.format(ii))
    print('**************************************')

def parameter_testing(stat, parameter_values, pp, aa, ll, nn,
                      dd, ww, tp, tl):
    table_tag = "(Variable: {})".format(variable_stats[stat])
    field_names = ["Algorithm", variable_stats[stat], "User time",
                   "System time", "Process time", "Wallclock time",
                   "Total Memory"]

    avg_table = PrettyTable()
    avg_table.title = 'Average of Statistics ' + table_tag
    avg_table.field_names = field_names

    stddev_table = PrettyTable()
    stddev_table.title = 'Standard Deviation of Statistics ' + table_tag
    stddev_table.field_names = field_names

    range_table = PrettyTable()
    range_table.title = 'Range of Statistics ' + table_tag
    range_table.field_names = field_names

    correctness_table = PrettyTable()
    correctness_table.title = 'Correctness testing'
    correctness_table.field_names = ["Algorithm", "No. of values learned",
                                     "Repititons", "Learning percentage"]

    message_loss_plot = {}
    for param in parameter_values:
        for algo in algorithms:
            message_loss_plot[algo] = message_loss_plot.get(algo, {})
            message_loss_plot[algo].setdefault(stat, []).append(param)
            performance = []
            correctness = 0
            for ii in range(nn):
                print_current_execution(stat, param, algo, ii + 1)
                subprocess.call("python3 -m da {} {} {} {} {} {} {} {}".format(
                                algo, pp, aa, ll, param, dd, ww, tp, tl)
                                .split(" "))
                performance.append(get_performance_parameters())
                correctness += get_correctness_parameters()
            avg_perf, std_dev, perf_range = get_performance_statistics(performance)
            add_plot_data(message_loss_plot[algo], avg_perf, std_dev)
            add_row_to_table(avg_table, algo, param, avg_perf)
            add_row_to_table(stddev_table, algo, param, std_dev)
            add_row_to_table(range_table, algo, param, perf_range)
            correctness_table.add_row([algo, correctness, nn,
                                       (correctness * 100) / nn])

    plot_graph(message_loss_plot, stat)
    return avg_table, stddev_table, range_table, correctness_table

# Performance testing
def performance_testing(pp, aa, ll, nn, rr, dd, ww, tp, tl):
    msg_loss_rates = [0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5]
    msg_delays = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    wait_times = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

    msg_loss_rate_stats = parameter_testing('msg_loss', msg_loss_rates, pp, aa,
                                            ll, nn, dd, ww, tp, tl)
    msg_delay_stats = parameter_testing('msg_delay', msg_delays, pp, aa, ll, nn,
                                        dd, ww, tp, tl)
    wait_time_stats = parameter_testing('wait_time', wait_times, pp, aa, ll, nn,
                                        dd, ww, tp, tl)
    return msg_loss_rate_stats, msg_delay_stats, wait_time_stats

def main():
    pp = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    aa = int(sys.argv[2]) if len(sys.argv) > 2 else 3
    ll = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    nn = int(sys.argv[4]) if len(sys.argv) > 4 else 10
    rr = float(sys.argv[5]) if len(sys.argv) > 5 else 0
    dd = int(sys.argv[6]) if len(sys.argv) > 6 else 0
    ww = int(sys.argv[7]) if len(sys.argv) > 7 else 0
    tp = int(sys.argv[8]) if len(sys.argv) > 8 else max(1, dd * 10)
    tl = int(sys.argv[9]) if len(sys.argv) > 9 else max(10, dd * 10)

    performance_results = performance_testing(pp, aa, ll, nn, rr, dd, ww, tp, tl)
    print_arguments(pp, aa, ll, nn, rr, dd, ww, tp, tl)

    for performance_result in performance_results:
        for ii in range(0, 4):
            print(performance_result[ii])
