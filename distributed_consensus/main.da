import subprocess
import sys
import random
import json
import statistics
from prettytable import PrettyTable

algorithms = ['orig.da', 'preemption.da']

def get_performance_parameters():
    f = open("performance_logs", "r")
    data = json.loads(f.readline())
    params = data['All']
    params['Wallclock_time'] = data['Wallclock_time']
    f.close()
    return params

def get_average_performance(performance_params):
    average_performance = {}
    for performance_param in performance_params:
        for key, value in performance_param.items():
            average_performance[key] = average_performance.get(key, 0) + \
                                        performance_param[key]

    for key, value in average_performance.items():
        average_performance[key] /= len(performance_params)
        average_performance[key] = round(average_performance[key], 5)

    return average_performance

def get_standard_deviation(performance_params):
    standard_deviation = {}
    for performance_param in performance_params:
        for key, value in performance_param.items():
            standard_deviation.setdefault(key, []).append(
                performance_param[key])

    for key, value in standard_deviation.items():
        standard_deviation[key] = statistics.stdev(value)

    return standard_deviation

# Performance testing
def performance_testing(pp, aa, ll, nn, rr, dd, ww, tp, tl):
    r_round = int(rr * 100)
    rb = [ii / 100 for ii in range(1, r_round + 1) if ii % (r_round / nn) == 0]
    db = [ii for ii in range(1, dd + 1) if ii % (dd / nn) == 0]
    wb = [ii for ii in range(1, ww + 1) if ii % (ww / nn) == 0]

    rb = [0.1, 0.2]
    msg_loss_table = PrettyTable()
    msg_loss_table.field_names = ["Algorithm", "Proposers", "Acceptors",
                                  "Learners", "Message loss rate",
                                  "Total user time", "Std dev user time",
                                  "Total system time", "Std dev system time",
                                  "Total process time", "Std dev process time",
                                  "Wallclock time", "Std dev Wallclock time",
                                  "Total Memory", "Std dev Total Memory"]

    message_loss_plot = {}
    for msg_loss in rb:
        for algo in algorithms:
            message_loss_plot[algo] = message_loss_plot.get(algo, [])
            performance = []
            for _ in range(nn):
                subprocess.call("python3 -m da {} {} {} {} {} {} {} {}".format(
                                algo, pp, aa, ll, msg_loss, dd, ww, tp, tl)
                                .split(" "))
                performance.append(get_performance_parameters())
            avg_perf = get_average_performance(performance)
            std_dev  = get_standard_deviation(performance)
            message_loss_plot.setdefault('Total_user_time', []).append(
                                         avg_perf['Total_user_time'])
            message_loss_plot.setdefault('std_user_time', []).append(
                                         std_dev['Total_user_time'])
            message_loss_plot.setdefault('Total_system_time', []).append(
                                         avg_perf['Total_system_time'])
            message_loss_plot.setdefault('std_system_time', []).append(
                                         std_dev['Total_system_time'])
            message_loss_plot.setdefault('Total_process_time', []).append(
                                         avg_perf['Total_process_time'])
            message_loss_plot.setdefault('std_process_time', []).append(
                                         std_dev['Total_process_time'])
            message_loss_plot.setdefault('Wallclock_time', []).append(
                                         avg_perf['Wallclock_time'])
            message_loss_plot.setdefault('std_Wallclock_time', []).append(
                                         std_dev['Wallclock_time'])
            msg_loss_table.add_row([algo, pp, aa, ll, msg_loss,
                                    avg_perf['Total_user_time'],
                                    std_dev['Total_user_time'],
                                    avg_perf['Total_system_time'],
                                    std_dev['Total_system_time'],
                                    avg_perf['Total_process_time'],
                                    std_dev['Total_process_time'],
                                    avg_perf['Wallclock_time'],
                                    std_dev['Wallclock_time'],
                                    avg_perf['Total_memory'],
                                    std_dev['Total_memory']]);

    print(msg_loss_table)

def main():
    pp = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    aa = int(sys.argv[2]) if len(sys.argv) > 2 else 3
    ll = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    nn = int(sys.argv[4]) if len(sys.argv) > 4 else 10
    rr = float(sys.argv[5]) if len(sys.argv) > 5 else 0
    dd = int(sys.argv[6]) if len(sys.argv) > 6 else 0
    ww = int(sys.argv[7]) if len(sys.argv) > 7 else 0
    tp = int(sys.argv[8]) if len(sys.argv) > 8 else 1
    tl = int(sys.argv[9]) if len(sys.argv) > 9 else 10

    performance_testing(pp, aa, ll, nn, rr, dd, ww, tp, tl);
